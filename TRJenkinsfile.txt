import java.util.*
import java.util.*
import java.io.FileInputStream
def BlackDuckCredentials = 'BlackDuckCredentials'
GitCredentials = 'GitCredentials'
TenCredentials = 'TenCredentials'
BowerCredentials = 'BowerCredentials'
DeploymentCredentials = 'DeploymentCredentials'
projectUrl = 'https://git.sami.int.thomsonreuters.com/EikonOffice/O365.git'
def Devops = 'Office365_Devops'
def Foldername = 'Office365'
def GitDevops = 'Devops'
def checkout(def branch,projectUrl,def Credentials) 
{
	checkout([
		$class: 'GitSCM', 
		branches: [[name:branch]],                         
		userRemoteConfigs: [[
		credentialsId:Credentials, 
		url: projectUrl
		]],
		extensions: [[
		$class: 'LocalBranch', 
		localBranch: "**"], 
		[$class: 'SubmoduleOption',
		parentCredentials: true, 
		recursiveSubmodules: true, 
		trackingSubmodules: true
		]]
	])
}

def transformBowerFile(def bowerfilepath, def tenusername, def tenpassword)
{
	def unamepwd = "https://"+"${tenusername}"+':'+"${tenpassword}"+"@bams-aws.refinitiv.com/artifactory/api/bower/default.bower.global"
	json = readJSON file: bowerfilepath 
	json.registry.search[0] = unamepwd
	//json.proxy = ""
	//json.'https-proxy' = ""
	println "Json file after adding credentials and removing proxy settings : ${json}"
	writeJSON file: bowerfilepath, json: json
	
}
def transformBowerAfterInstall(def bowerfilepath,def proxyurl)
{
	json = readJSON file: bowerfilepath 
	json.proxy = proxyurl.toString()
	json.'https-proxy' = proxyurl.toString()
	println "Json file after inserting back the proxy settings : ${json}"
	writeJSON file: bowerfilepath, json: json
}

def transformappjson(def appjsonpath,String versionnumber)
{
	json = readJSON file: appjsonpath
	json.version = versionnumber.toString()
	println "app.json after transformation: ${json}"
	writeJSON file:appjsonpath, json:json
}

def filezipoperation (String path) {
	fileOperations([

		fileZipOperation(path)
	])
}
def emailnotification(String version, String buildstatus,String AlphaDeployment, String BetaDeployment, String ProdDeployment) {
	emailext (
	subject: "Jenkins job Name:: ${env.JOB_NAME} - Version: ${version} - Build Status: "+currentBuild.currentResult,
body: 
"""
PROJECT :${env.JOB_NAME}
BUILD NUMBER :${env.BUILD_NUMBER}
Version :${version}
Deployment to Alpha : ${AlphaDeployment}
Deployment to Beta : ${BetaDeployment}
Deployment to Prod : ${ProdDeployment}
Build Status :${currentBuild.currentResult}
Check console output at : ${env.BUILD_URL}console
""",
	to: "${env.Email_Recipients}",
	attachLog: true
	 )
 }

def failureemailnotification(String version, String buildstatus,String errormsg, String AlphaDeployment, String BetaDeployment, String ProdDeployment) {
	emailext (
	subject: "Jenkins job Name:: ${env.JOB_NAME} - Version: ${version} - Build Status: "+currentBuild.currentResult,
body: 
"""
PROJECT :${env.JOB_NAME}
BUILD NUMBER :${env.BUILD_NUMBER}
Version :${version}
Deployment to Alpha : ${AlphaDeployment}
Deployment to Beta : ${BetaDeployment}
Deployment to Prod : ${ProdDeployment}
Error :${errormsg}
Check console output at : ${env.BUILD_URL}console
""",
	to: "${env.Email_Recipients}",
	attachLog: true
	 )
 } 

node
{
	try
	{
		def workspace = pwd()
		SonarQube = tool 'SonarQube'
		stage('Code Checkout')
		{
			dir("${workspace}\\${Foldername}")
			{
				deleteDir()
				branch = "${env.Git_Branch}"
				checkout("${branch}", "${projectUrl}","${GitCredentials}")
			}
		}	
		stage('Read Properties')
		{
			dir("${workspace}\\${Foldername}")
			{
				try
				{	
					Properties props = new Properties()
					String propfile = readFile("${workspace}\\${Foldername}\\${Devops}\\${Foldername}\\Global.properties")
					StringReader reader = new StringReader(propfile); 
					props.load(reader)
					workfolder = props.getProperty('workfolder')
					echo " Working Folder is : ${workfolder}"
					buildfolder = props.getProperty('buildfolder')
					echo "Build Folder is : ${buildfolder}"
					blackduckurl = props.getProperty('blackduckurl')
					blackduckprojectname = props.getProperty('blackduckprojectname')
					proxyurl = props.getProperty('proxyurl')
					majorversion = props.getProperty('majorversion')
					minorversion = props.getProperty('minorversion')
					jfrogrepopath = props.getProperty('jfrogrepopath')
					artifactoryurl = props.getProperty('artifactoryurl')
				}
				finally
				{
					
				}
			}	
		}
		stage('Create Version')
		{
			versionnumber = "${majorversion}"+ '.'+"${minorversion}"+"."+"${env.BUILD_NUMBER}"
			echo "Versionnumber is ${versionnumber}"
		}
		if(("${env.Beta}"=="false"&&"${env.Prod}"=="false")|| "${env.Alpha}"=="true")
		{
				stage('Build') 
					{
					  dir("${workspace}\\${Foldername}\\${workfolder}")
					  {
						withCredentials([usernamePassword(credentialsId: "${GitCredentials}", passwordVariable: 'bowerpassword', usernameVariable: 'bowerusername')]) 
						{
							bat """ npm cache clean --force """
							bat """ npm config set https-proxy http://webproxy.int.westgroup.com:80 """
							bat """ npm config set proxy http://webproxy.int.westgroup.com:80 """
							parallel (
									"npminstall" : {
										bat """npm install"""
									},
									"bowerinstall" : {
									   bat """npm i -g webpack webpack-dev-server typescript typings ts-node bower bower-art-resolver"""
									}
									
								)
							transformBowerFile("${workspace}\\${Foldername}\\${workfolder}\\.bowerrc","${bowerusername}","${bowerpassword}")
							bat """call node_modules/.bin/bower install """
							bat """npm run build"""
						}
						
					  }
					}
					stage('SonarAnalysis')
					{
						dir("${workspace}\\${Foldername}\\${workfolder}")
						{
							bat """ copy /y \"${workspace}\\${Foldername}\\${Devops}\\${Foldername}\\sonar-project.properties\" \"${workspace}\\${Foldername}\\${workfolder}\" """
							withSonarQubeEnv('SonarQube') 
							{
								withEnv(["workspace=${workspace}\\${Foldername}","workfolder=${workfolder}"]) 
								{
									bat """ \"${SonarQube}\\bin\\sonar-scanner.bat\"  """
								}
								
							}
							/*sleep(10)
							timeout(time:2, unit: 'MINUTES') 
							{ 
								def qg = waitForQualityGate() 
								if ((qg.status == 'ERROR')) 
								{
									error "Pipeline aborted due to following quality gate failure: StaticScan=${qg.status}"
								}              
													
							}*/
						}	
						
					}	
					/*stage('BlackDuckAnalysis')
					{
						withCredentials([usernamePassword(credentialsId: "${BlackDuckCredentials}", passwordVariable: 'blackduckpassword', usernameVariable: 'blackduckusername')]) 
						{
							withEnv([ "blackduckprojectname=${blackduckprojectname}",
												"workspace=${workspace}\\${Foldername}","workfolder=${workfolder}","buildfolder=${buildfolder}","blackduckurl=${blackduckurl}"
							]) {					
							synopsys_detect ("--detect.source.path='${workspace}\\${Foldername}\\${workfolder}\\${buildfolder}' --detect.project.name='${blackduckprojectname}' --detect.project.version.name='Daily' --blackduck.url='${blackduckurl}' --blackduck.username='${blackduckusername}' --blackduck.password='${blackduckpassword}'")
							}
							
						}
					}*/
				if("${env.Alpha}"=="true")
				{
					stage('Transform and Deploy on Alpha')
					{
							
							transformappjson("${workspace}\\${Foldername}\\${workfolder}\\${buildfolder}\\app.json","${versionnumber}")
							echo "Deploying the code to Alpha"
							deployment = bat(returnStdout: true, script: """ \"${workspace}\\${Foldername}\\${Devops}\\Publisher\\eem_deploy.exe\" Alpha apppackage \"${workspace}\\${Foldername}\\${workfolder}\\${buildfolder}\" -N EikonOffice365 """).trim()	
							echo "Deployment log is ${deployment}"
							if("${deployment}".contains('Upload succeeded'))
							{
								echo "Deployment to Alpha Succeeded"
							}
							else
							{
								error "Deployment to Alpha failed"
							}
					}
					stage('Zip and Upload Artifacts')
					{
						dir("${workspace}\\${Foldername}")
						{
							bat """ Powershell.exe -executionpolicy remotesigned -File \"${workspace}\\${Foldername}\\${Devops}\\${Foldername}\\ZipArtifacts.ps1\" -version ${versionnumber} -path ${workspace}\\${Foldername}\\${workfolder} """
							bat """ dir \"${workspace}\\${Foldername}\\${workfolder}\" """
							withCredentials([usernamePassword(credentialsId: "${GitCredentials}", passwordVariable: 'artifactpassword', usernameVariable: 'artifactusername')])
							{
								rtUpload (
									serverId: "TR-Artifactory",
									spec:
										"""{
										  "files": [
											{
											  "pattern": "${workspace}\\${Foldername}\\${workfolder}\\*.zip",
											  "target": "${jfrogrepopath}"
											}
										 ]
										}"""
								)
							}	
						}	
					}
				}	
		}
		if("${env.Beta}"=="true")
		{
			stage('Deploy on Beta')
			{
					if("${env.Alpha}"=="true")
					{
						transformappjson("${workspace}\\${Foldername}\\${workfolder}\\${buildfolder}\\app.json","1.0.61")
						deployment = bat(returnStdout: true, script: """ \"${workspace}\\${Foldername}\\${Devops}\\Publisher\\eem_deploy.exe\" ppe1hdccispod apppackage \"${workspace}\\${Foldername}\\${workfolder}\\${buildfolder}\" -N EikonOffice365 """).trim()
						echo "Deployment log is ${deployment}"
						if("${deployment}".contains('Upload succeeded'))
						{
							echo "Deployment to Beta Succeeded"
						}
						else
						{
							error "Deployment to Beta failed"
						}
					}
					else
					{
						if("${env.Version}"=="")
						{
							error "Version Number is mandatory to download artifacts and deploy to Beta"
							
						}
						else
						{
							
								versiondownload = "${jfrogrepopath}"+"${env.Version}"
								 rtDownload(
									serverId: "TR-Artifactory",
									spec:
										"""{
										  "files": [
											{
											  "pattern": "${versiondownload}",
											  "target": "${workspace}\\${Foldername}\\${env.Version}"
											}
										 ]
										}"""
								)
								bat """ dir /b /a-d \"${workspace}\\${Foldername}" """
								splitarray = "${env.Version}".split(".zip")
								artifactsfolder = splitarray[0]
								bat """ Powershell.exe -executionpolicy remotesigned -File \"${workspace}\\${Foldername}\\${Devops}\\${Foldername}\\UnzipArtifacts.ps1\" -zipfile ${workspace}\\${Foldername}\\${Foldername}\\${Version} -outputpath ${workspace}\\${Foldername}\\${artifactsfolder} """
								transformappjson("${workspace}\\${Foldername}\\${artifactsfolder}\\app.json","1.0.62")
								deployment = bat(returnStdout: true, script: """ \"${workspace}\\${Foldername}\\${Devops}\\Publisher\\eem_deploy.exe\" ppe1hdccispod apppackage \"${workspace}\\${Foldername}\\${artifactsfolder}\" -N EikonOffice365 """).trim()
								echo "Deployment log is ${deployment}"
								if("${deployment}".contains('Upload succeeded'))
								{
									echo "Deployment to Beta Succeeded"
								}
								else
								{
									error "Deployment to Beta failed"
								}
								
								

						}	
					}
			}
		}
		if("${env.Prod}"=="true")
		{
			stage('Deploy on Prod')
			{
					if("${env.Alpha}"=="true")
					{
						deployment = bat(returnStdout: true, script: """ \"${workspace}\\${Foldername}\\${Devops}\\Publisher\\eem_deploy.exe\" hdcphdccpspod apppackage \"${workspace}\\${Foldername}\\${workfolder}\\${buildfolder}\" -N EikonOffice365 """).trim()
						echo "Deployment log is ${deployment}"
						if("${deployment}".contains('Upload succeeded'))
						{
							echo "Deployment to Production Succeeded"
						}
						else
						{
							error "Deployment to Production failed"
						}
					}
					else
					{
						if("${env.Version}"=="")
						{
							error "Version Number is mandatory to download artifacts and deploy to Production"
							
						}
						else
						{
							
								versiondownload = "${jfrogrepopath}"+"${env.Version}"
								 rtDownload(
									serverId: "TR-Artifactory",
									spec:
										"""{
										  "files": [
											{
											  "pattern": "${versiondownload}",
											  "target": "${workspace}\\${Foldername}\\${env.Version}"
											}
										 ]
										}"""
								)
								bat """ dir /b /a-d \"${workspace}\\${Foldername}" """
								splitarray = "${env.Version}".split(".zip")
								artifactsfolder = splitarray[0]
								bat """ Powershell.exe -executionpolicy remotesigned -File \"${workspace}\\${Foldername}\\${Devops}\\${Foldername}\\UnzipArtifacts.ps1\" -zipfile ${workspace}\\${Foldername}\\${Foldername}\\${Version} -outputpath ${workspace}\\${Foldername}\\${artifactsfolder} """
								transformappjson("${workspace}\\${Foldername}\\${artifactsfolder}\\app.json","1.0.57")
								deployment = bat(returnStdout: true, script: """ \"${workspace}\\${Foldername}\\${Devops}\\Publisher\\eem_deploy.exe\" hdcphdccpspod apppackage \"${workspace}\\${Foldername}\\${artifactsfolder}\" -N EikonOffice365 """).trim()
								echo "Deployment log is ${deployment}"
								if("${deployment}".contains('Upload succeeded'))
								{
									echo "Deployment to Production Succeeded"
								}
								else
								{
									error "Deployment to Production failed"
								}
								
								

						}	
					}
			}
		}
		
		if(("${env.Alpha}"=="true")||("${env.Beta}"=="true")||("${env.Prod}"=="true"))
		{
			stage('Create Tag in Git')
			{
				dir("${workspace}\\${Foldername}")
				{
					withCredentials([usernamePassword(credentialsId: "${GitCredentials}", passwordVariable: 'gitpassword', usernameVariable: 'gitusername')])
					{
						tagversion = "O365-CI-"+"${versionnumber}"
						bat """ git tag ${tagversion} """
						bat """ git push https://${gitusername}:${gitpassword}@git.sami.int.thomsonreuters.com/EikonOffice/O365.git --tags """
					}	
				}
			}
		}
	}
	catch(Exception e){
			currentBuild.result = 'FAILURE'
			echo "Current Build Status is ${currentBuild.result}"
			failureemailnotification("${versionnumber}","${currentBuild.result}","${e.message}","${env.Alpha}","${env.Beta}","${env.Prod}")
			error e.message
	}
	finally
	{
		stage('notify'){
				if(("${currentBuild.result}"!="FAILURE")&&("${currentBuild.result}"!="NOT_BUILT"))
				{
					emailnotification("${versionnumber}", "${currentBuild.result}","${env.Alpha}","${env.Beta}","${env.Prod}")
				}	
				
		}	
	}
}    